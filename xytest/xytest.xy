import libxy.cli;
import libxy.(string, stdio, fs, array, memory, error, process, perf, tty);


;; Collect, Compile, and Run Tests
struct Args {
    ;; Where to look for tests
    dir : Str;
}

def parse(:Args) -> Args {
    args: Args;

    schema: CliSchema;
    schema'prog("xytest", short="Discover and Run Tests");
    schema'param("dir", .positional);

    parsed := schema'parse();
    for (arg in parsed) {
        args.dir = arg.value'copy;
    }
    return args;
}

;; Use this struct to mark test function
*struct Test~[TagCtor{label="test"}] {}

;; Entry point for the test discovery stage
def main~EntryPoint(args := Args'parse) -> void | Int {
    moduleDirs : mut = Array~Str{};
    findModules(moduleDirs, args.dir, args.dir);
    print(f"Found {moduleDirs'len} xy modules\n");

    mkdir(".xytest_cache");
    runnerFile : mut = open(".xytest_cache/xytestRunner.xy", OpenFlags{.create, .writeOnly, .truncate});
    for (dir in moduleDirs) {
        runnerFile'write(f"import {dir};\n");
    }

    runnerFile'write("{#! cat xytestRunner.src }");
    runnerFile'close;
    runnerFile = File{-1};

    print("Building test runner executable...\n");
    xycArgs := Array~Str @ {
        ".xytest_cache/xytestRunner.xy", "-L", "..", "-L", "deps/",
        "-o", "bin/run-tests",
    };
    compilationStatus := run("xyc", xycArgs)'wait();
    if (compilationStatus != 0) {
        print(f"Compilation failed with {compilationStatus}\n");
        error compilationStatus;
    }

    print("Running tests...\n");
    runArgs : Array~Str;
    _ = run("bin/run-tests",runArgs)'wait();
}

def findModules(foundDirs: mut Array~Str, dir: Str~[.nullTerminated], moduleName: Str) {
    print(f"Looking for tests in {dir}\n");

    isModule : Bool;
    for (node in ls(dir, .type)) {
        if (node.type.dir) {
            subdir := path"{dir}/{node.name}";
            submodule := (
                if (moduleName.size > 0) f"{moduleName}.{node.name}"
                else f"{node.name}"
            );
            findModules(foundDirs, subdir, submodule);
        } elif (!isModule && node.type.file && node.name'endswith(".xy")) {
            .isModule;
            print(f"Found xy module in {dir} {moduleName}\n");
            d : mut = moduleName'copy;
            foundDirs'append(d =>);
        }
    }
}

*struct TestVector {
    name: Str~MemStatic;
    package: Str~MemStatic;
    testCb: ()->();
}

*def runTests(tests: Array~TestVector) -> void | Int {
    testingStart := time();

    print(f"Found {tests'len} tests\n");
    for (t in tests) {
        print(f"Running {t.package}.{t.name}... ");
        [t.testCb]();
        print("Success\n");
    }

    elapsed := time() - testingStart;
    elapsedS := elapsed / 1_000_000_000l;
    elapsedDecis := (elapsed \mod 1_000_000_000l) / 100_000_000l;

    badge := badge(tests'len);
    print(
        f"{Esc{.bold, .fg.green}}\
        ===== {tests'len} passed in {elapsedS}.{elapsedDecis}s {badge}=====\
        {Esc{.reset}}\n"
    );
}

def badge(num: Size) -> Str~MemStatic {
    if (num > 0 && num <= 2) return "🥳 ";
    if (num == 42) return "🤪 ";
    if (num == 69) return "☯️ ";
    if (num == 100) return "💯 ";
    if (num >= 300 && num < 310) return "🐡 ";
    if (num == 314) return "🥧 ";
    if (num == 628) return "🥧🥧 ";
    if (num == 942) return "🥧🥧🥧 ";
    if (num >= 1000 && num < 1010) return "🐉 ";
    if (num >= 2000 && num < 2010) return "🦖 ";
    if (num >= 10000 && num < 10010) return "🦄 ";
    return "";
}
