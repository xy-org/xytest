import libxy.cli;
import libxy.string;
import libxy.stdio;
import libxy.fs;
import libxy.array;
import libxy.memory;
import libxy.error;
import libxy.process;

;; Collect, Compile, and Run Tests
struct Args {
    ;; Where to look for tests
    dir : Str;
}

def parse(:Args) -> Args {
    args: Args;

    schema: CliSchema;
    schema'param("dir", .positional);

    parsed := schema'parse();
    for (arg in parsed) {
        args.dir = arg.value'copy;
    }
    return args;
}

;; Use this struct to mark test function
struct Test~[TagCtor{label="test"}] {}

def findModules(foundDirs: mut Array~Str, dir: Str~[.nullTerminated], moduleName: Str) {
    print(f"Looking for tests in {dir}\n");

    isModule : Bool;
    for (node in ls(dir, .type)) {
        if (node.type.dir) {
            subdir := path"{dir}/{node.name}";
            submodule := (
                if (len(moduleName) > 0) f"{moduleName}.{node.name}"
                else f"{node.name}"
            );
            findModules(foundDirs, subdir, submodule);
        } elif (!isModule && node.type.file && node.name'endswith(".xy")) {
            .isModule;
            print(f"Found xy module in {dir} {moduleName}\n");
            d : mut = moduleName'copy;
            foundDirs'push(d =>);
        }
    }
}

def main~EntryPoint(args := Args'parse) {
    moduleDirs : mut = Array~Str{};
    findModules(moduleDirs, args.dir, args.dir);
    print(f"Found {moduleDirs'len} xy modules\n");

    mkdir(".xytest_cache");
    runnerFile : mut = open(".xytest_cache/xytestRunner.xy", OpenFlags{.create, .writeOnly, .truncate});
    for (dir in moduleDirs) {
        runnerFile'write(f"import {dir};\n");
    }

    runnerFile'write("{#! cat xytestRunner.src }");
    runnerFile'close;
    runnerFile = File{-1};

    print("Building test runner executable...\n");
    xycArgs : Array~Str;
    xycArgs'push(".xytest_cache/xytestRunner.xy");
    xycArgs'push("-L");
    xycArgs'push("..");
    xycArgs'push("-L");
    xycArgs'push("deps/");
    xycArgs'push("-o");
    xycArgs'push("bin/run-tests");
    compilationStatus := run("xyc", xycArgs)'wait();
    if (compilationStatus != 0) {
        print(f"Compilation failed with {compilationStatus}\n");
        return;
    }

    print("Running tests...\n");
    runArgs : Array~Str;
    run("bin/run-tests",runArgs)'wait();
}

*struct TestVector {
    name: Str~MemStatic;
    package: Str~MemStatic;
    testCb: ()->();
}

*def runTests(tests: pseudo @TestVector[], len : Size = tests'len) {
    #print(f"Found {tests'len} tests\n");
    #for (t in tests) {
    #    print(f"Running {t.name}... ");
    #    [t.testCb]();
    #    print("Success\n");
    #}
}
