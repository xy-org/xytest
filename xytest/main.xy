import libxy.cli in cli
import libxy.strings
import libxy.stdio
import libxy.arrays
import libxy.memory
import posix~[CLib{headers=["dirent.h", "sys/stat.h", "fcntl.h"]}] in c

;; Collect, Compile, and Run Tests
struct Args {
    ;; Where to look for tests
    dir : Str;
}

def parse(:Args) -> Args {
    args: Args;
    cli.parse(args);
    return args;
}

;; Use this struct to mark test function
struct Test~[TagCtor{label="test"}] {}

def findModules(foundDirs: inout Array~Str, dir: Str, moduleName: Str) {
    print(f"Looking for tests in {dir}\n");
    cDir : var Ptr~[c.DIR] = c.opendir(dir'toCStr); # XXX
    dirent : Ptr~[c."struct dirent"];
    isModule : var bool = false;
    while (true) {
        dirent = c.readdir(cDir);
        # XXX should be null
        if (dirent == Ptr{}) break;
        entryName := Str~MemExt{c."dirent->d_name", c.strlen(c."dirent->d_name")};
        if (entryName'startswith(".")) continue;
        if(c."dirent->d_type == DT_DIR")  {
            subdir := f"{dir}/{entryName}";
            submodule : Str;
            if (moduleName.len > 0) {
                submodule = f"{moduleName}.{entryName}";
            } else {
                submodule = f"{entryName}";
            }
            findModules(foundDirs, subdir, submodule);
        }
        if (entryName'endswith(".xy")) {
            if (isModule) {

            } else {
                isModule = true;
                print(f"Found xy module in {dir}\n");
                fd : var = f"{moduleName}";
                foundDirs'push(fd);
                fd = Str{}; # XXX workaround for memory not being moved to push
            }
        }
    }
}

def write(fd: int, str:Str) {
    c.write(fd, str.addr, str.len);
}

def main~EntryPoint(args := Args'parse) {
    moduleDirs : var = Array~Str{};
    findModules(moduleDirs, args.dir, "");
    print(f"Found {moduleDirs'len} xy modules\n");

    c.mkdir(c".xytest_cache", 0777);
    fd: int = c.open(c".xytest_cache/xytestRunner.xy", c."O_CREAT | O_WRONLY | O_TRUNC", 0644);
    for (dir in moduleDirs) {
        write(fd, f"import {dir}\n");
    }
    write(fd, "import libxy.arrays\n");
    write(fd, "\n");

    write(fd, "def main~[EntryPoint\{priority=100\}]() \{\n");
    write(fd, "    tests : Array~TestVector;\n");
    write(fd, "    for (f in $* ~Test()) \{\n");
    write(fd, "        tests.append(TestVector\{f});\n");
    write(fd, "}\n");
    write(fd, "    runTests(tests);\n");
    write(fd, "\}\n");

    c.close(fd);
}

struct TestVector {
    testCb: ()->();
}

def runTests(tests: Array~TestVector) {
    print(f"Found {tests'len} tests\n");
}

def dummyTest~Test() {
}
